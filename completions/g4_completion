# Copyright 2008 Google Inc. All Rights Reserved.
# Author: mhchan@google.com (Matthew Chan)
#
# G4 tab completion plugins.
# This file sets up tab completition(s) for the g4 command.
# Please fill free to send any comment/bug/suggestion to mhchan@google.com
# Please note that this CANNOT be run as a shell script.
#
# *Common use cases / Instructions:
# 1. After typing 'g4 ad', you probably want to type <TAB> so that it fills in
#    'add' for you.
#
# 2. At any time after -c, you would want to type <TAB> to complete the
#    changelist number for you.
#    If there is a unique match, the number is automatically filled in for you.
#    If there are multiple matches, the script will automatically fill in the
#    common prefixes. If you hit <TAB> twice (like in the file case), it will
#    lists out the available changelist (with a brief description).
#    P.S.: If at any point, you had -c followed by a prefix of "default", it
#    will automatically fill in "default" for you. In all other cases, the
#    default changelist is ignored.
#
# 3. At any time after -m, it would try to complete the username for you. The
#    default searches through all available users in Google, which is VERY
#    SLOW. You can override by having the file ~/.g4_user_complete.lst
#    containing the list of "interesting" users.
#    (Credit goes to Saurabh for this suggestion.)
#    There is an utility function _gen_owners_list which parses all the OWNERS
#    files in your current (and sub) directory, merges them and create a sorted
#    list to the standard output. For instance, you may want to try
#      _gen_owners_list > ~/.g4_user_complete.lst
#    (Credit goes to Kai and Jeff for their suggestion.)
#    P.S.: If the file ~/.g4_user_complete.lst does not exist or this script
#      cannot find a match for your query, it will fall back to the global data
#      which is slow. I might disable that in the feature.
#      Moreover, it should be able to deal with comma separated usernames, but
#      I have no idea how to make it nice and easy to deal with.
#
# 4. Certain commands have default parameter ordering. For instance, you would
#    probably go 'g4 reopen -c <CL#> file_name(s)'
# 4.1 When you type 'g4 reo' and start tabbing, the first tab completes 'reopen'
#     for you, the next gives you '-c', the next is the normal CL# completions,
#     followed by normal file completions
# 4.2 When you are doing 'g4 lint', the next tabs gives you either -c or -d.
#     It would be the normal <CL#> completion after -c, and file completion
#     after -d
# 4.3 The format for 'g4 mail' is 'g4 mail -c <CL#> -m'
#
# *Installation:
#  Brief: source this file in your .bashrc
#  Detail:
#  I would recommend making a copy of this file to your home directory.
#  Suppose you name the file as .g4_complete.sh, add the lines
#  if [ -f ~/.g4_complete.sh ]; then
#    source ~/.g4_complete.sh
#  fi
#  in your .bashrc file.
#
# *Side effects:
# 1. 3 Extra functions:
# 1.1  _g4_pend
#    This shows a brief summary of all non-default changelist in your current
#    clients. It is a wrapped 'g4 pending' basically.
# 1.2  _gen_owners_list
#    This parses all OWNERS file in your current directory, combines all
#    usernames and creates a sorted list.
# 1.3  _g4_tab_complete
#    The function that does all the work with the tab completions.
# 2. 1 Extra Global Variable:
# 2.1  _G4_COMMANDS
#    This contains all recognized g4 commands. By default, this contains every
#    commands listed in
#      g4 help commands
#
# *Known issues:
# 1. The startup time may be significantly longer because the script looks for
#    all available commands from g4 at startup. If you only need a subset of
#    them, you should modify the variable _G4_COMMANDS to list only those that
#    are useful to you.
# 2. _g4_pend, -c, etc. are really slow since they need to call g4.
# 3. -m is even slower when it searches through the global database. Moreover,
#    the comma-separated username mode is not very user friendly.
# 4. A lot of the commands are not smart enough...
# 5. The original author does not know how to test this thoroughly...

# function _g4_pend
# Retrieve the a summary of pending changelist in your current client.
function _g4_pend {
  g4 pending | sed -e 's/^* //' | gawk '/^Change/{print $0}' | sed -e 's/^Change //' | grep -v "^default :"
}

# function _gen_owners_list
# Parse all OWNERS files under the current directory, combine them to create a
# list of possible reviewers. The list is outputted to the standard output so
# that you can store them in a file (probably ~/.g4_user_complete.lst)
function _gen_owners_list {
  find . -name OWNERS | xargs cat | awk '/..*/ {print $1}' | grep -v ':' | grep -v '#' | sort | uniq
}

# Enable custom tab completion
shopt -s progcomp

# INFO: Hardcode your favourite commands if g4 is too slow....
# Retrieve all available G4 commands
_G4_COMMANDS=$(g4 help commands | gawk '/^   /{print $1}')

# The function to invoke when performing tab completion.
# When this fails, the default file completion will be on.
function _g4_tab_complete {
  local curw
  curw=${COMP_WORDS[COMP_CWORD]}

  if [[ "$COMP_CWORD" -eq "1" ]]
  then
    COMPREPLY=($(compgen -W "$_G4_COMMANDS" -- $curw))
    return 0
  fi

  COMPREPLY=()
  local g4_command
  local prev
  prev=${COMP_WORDS[COMP_CWORD-1]}
  g4_command=${COMP_WORDS[1]}
  local match_list
  match_list=()
  # If it is -c, probably we want to find all pending changelists?
  if [[ "$prev" == "-c" ]]
  then
    local is_default="false"
    case "${curw}" in
      d | de | def | defa | defau | defaul | default)
        is_default="true"
      ;;
    esac
    if [[ "$is_default" == "true" ]]; then
      COMPREPLY=("default")
      return 0
    fi
    # Check if the user means the default changelist
    local SPACE_REPLACER="__SpAcE__"
    match_list=($(_g4_pend | sed -e "s/ : /:/" | sed -e "s/ /$SPACE_REPLACER/g"))
    matches=($(compgen -W "${match_list[*]}" -- $curw))
    num_matches=${#matches[@]}
    if [[ $num_matches -eq 0 ]]; then
      COMPREPLY=()
      return 0
    fi
    if [[ $num_matches -eq 1 ]]; then
      COMPREPLY=(${matches[0]%%:*})
      return 0
    fi
    # There are multiple matches
    for i in `seq 0 $((num_matches - 1))`
    do
      local tmp=${matches[i]//$SPACE_REPLACER/ }
      COMPREPLY[i]="$tmp        "  # Add more space to make it more clear
    done
    return 0
  elif [[ "$prev" == "-m" ]]
  then
    local prefix
    local match_username
    local matches=()
    prefix=${curw%,*}
    if [[ "$prefix" == "$curw" ]]
    then
      match_username="$curw"
      prefix=""
    else
      prefix="$prefix,"
      match_username=${curw##*,}
    fi
    # Search for all possible matches
    if [ -f ~/.g4_user_complete.lst ]; then
      local interesting_users=$(cat ~/.g4_user_complete.lst)
      matches=($(compgen -W "$interesting_users" -- $match_username))
    fi
    # TODO(mhchan): We may want to disable this check if it really pisses
    # people off.
    if [[ ${#matches[@]} -eq 0 ]]; then
      matches=($(compgen -u $match_username))
    fi
    COMPREPLY=(${matches[@]/#/$prefix})
    return 0
  fi

  case "${g4_command}" in
    help)
      match_list="$_G4_COMMANDS"
      ;;
    add | revert | describelog | blame | who | edit | open | diff)
      COMPREPLY=()
      return 0
    ;;
    lint)
      if [[ "COMP_CWORD" -eq "2" ]]
      then
        match_list="-c -d"
      else # If it is not -c ....., use a file then
        COMPREPLY=()
        return 0
      fi
    ;;
    approve | patch | submit | reapprove | rollback)
      match_list="-c"
    ;;
    reopen)
      if [[ "$COMP_CWORD" -gt "3" ]]  # We are done with reopen -c ...
      then
        COMPREPLY=()
        return 0
      else
        if [[ "$COMP_CWORD" -eq "2" ]]
        then
          match_list="-c"
        fi # We don't have to deal with 3....
      fi
    ;;
    mail | remail)
      if [[ "$COMP_CWORD" -eq "2" ]]
      then
        match_list="-c"
      elif [[ "$COMP_CWORD" -eq "4" ]]
      then
        match_list="-m"
      elif [[ "$COMP_CWORD" -eq "6" ]]
      then
        match_list="-b"
      fi
    ;;
  esac
  COMPREPLY=($(compgen -W "$match_list" -- $curw))
  return 0
}

# By default, use the file name for this.
complete -o default -F _g4_tab_complete g4
